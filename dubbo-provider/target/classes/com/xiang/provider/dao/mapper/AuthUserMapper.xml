<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiang.provider.dao.mapper.AuthUserMapper">
  <resultMap id="BaseResultMap" type="com.xiang.provider.dao.entity.AuthUser">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="pwd" jdbcType="VARCHAR" property="pwd" />
    <result column="sex" jdbcType="TINYINT" property="sex" />
    <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, account, pwd, sex, birthday, create_time
  </sql>
  <select id="selectByExample" parameterType="com.xiang.provider.dao.entity.AuthUserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from auth_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from auth_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from auth_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.xiang.provider.dao.entity.AuthUserExample">
    delete from auth_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xiang.provider.dao.entity.AuthUser">
    insert into auth_user (id, account, pwd, 
      sex, birthday, create_time
      )
    values (#{id,jdbcType=BIGINT}, #{account,jdbcType=VARCHAR}, #{pwd,jdbcType=VARCHAR}, 
      #{sex,jdbcType=TINYINT}, #{birthday,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xiang.provider.dao.entity.AuthUser">
    insert into auth_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="pwd != null">
        pwd,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xiang.provider.dao.entity.AuthUserExample" resultType="java.lang.Long">
    select count(*) from auth_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update auth_user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.pwd != null">
        pwd = #{record.pwd,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=TINYINT},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update auth_user
    set id = #{record.id,jdbcType=BIGINT},
      account = #{record.account,jdbcType=VARCHAR},
      pwd = #{record.pwd,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=TINYINT},
      birthday = #{record.birthday,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiang.provider.dao.entity.AuthUser">
    update auth_user
    <set>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        pwd = #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiang.provider.dao.entity.AuthUser">
    update auth_user
    set account = #{account,jdbcType=VARCHAR},
      pwd = #{pwd,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>


  <sql id="table">
    auth_user
  </sql>
  <select id="findBySql" resultMap="BaseResultMap" statementType="STATEMENT">
    select * from <include refid="table"/>
    where ${sql}
  </select>
  <select id="getCountByFilters" resultType="java.lang.Integer" statementType="STATEMENT">
    SELECT count(1) FROM <include refid="table"/>
    <where>
      <if test="filters.size() > 0">
        <foreach item="item" index="index" collection="filters" separator=" and">
            ${filters[index].sql}
        </foreach>
      </if>
    </where>
  </select>

  <select id="queryByPage" resultMap="BaseResultMap" statementType="STATEMENT">
    SELECT * FROM <include refid="table"/>
    <where>
      <if test="filters.size() > 0">
        <foreach item="item" index="index" collection="filters" separator=" and">
            ${filters[index].sql}
        </foreach>
      </if>
    </where>
    <if test="page.orderBy != null">
      ORDER BY ${page.orderBy} ${page.order}
    </if>
    <if test="page.isAll == false">
      LIMIT ${page.limit} OFFSET ${page.offset}
    </if>
  </select>

  <select id="findByMultiValue" resultMap="BaseResultMap" statementType="STATEMENT">
    SELECT * FROM <include refid="table"/>
    WHERE
    <foreach item="item" index="index" collection="cols" separator=" and">
      ${cols[index]} = ${vals[index]}
    </foreach>
    limit 1;
  </select>

  <select id="findUniqueByMultiValue" resultMap="BaseResultMap" statementType="STATEMENT">
    SELECT *
    FROM <include refid="table"/>
    WHERE
    <foreach index="index" item="item" collection="cols" separator=" and">
      ${cols[index]} = ${vals[index]}
    </foreach>
    limit 1;
  </select>

  <select id="findByMultiValueByOrder" resultMap="BaseResultMap" statementType="STATEMENT">
    SELECT *
    FROM <include refid="table"/>
    WHERE
    <foreach item="item" index="index" collection="cols" separator=" and">
      ${cols[index]} = ${vals[index]}
    </foreach>
    ORDER BY ${orderBy} ${order}
  </select>

  <select id="queryAllByPage" resultMap="BaseResultMap" statementType="STATEMENT">
    SELECT * FROM <include refid="table"/>
    <where>
      <if test="sql != null">${sql} and</if>
      deleted = false
    </where>
    ORDER BY CREATE_TIME DESC OFFSET ${page.offset} LIMIT ${page.limit}
  </select>

  <select id="getCountByValue" resultType="java.lang.Integer" statementType="STATEMENT">
    SELECT count(1) FROM <include refid="table"/>
    WHERE ${col} = ${val} and deleted = false
  </select>

  <select id="getCountByMultiValue" resultType="java.lang.Integer" statementType="STATEMENT">
    SELECT count(1) FROM <include refid="table"/>
    WHERE
    <foreach item="item" index="index" collection="cols" separator=" and">
      ${cols[index]} = ${vals[index]}
    </foreach>
  </select>

  <select id="get" resultMap="BaseResultMap" parameterType="Long">
    select * from <include refid="table"/>
    where id = #{id}
  </select>

  <select id="findUniqueByValue" resultMap="ResultMapWithBLOBs" statementType="STATEMENT">
    SELECT *
    FROM <include refid="table"/>
    WHERE ${col} = ${val}
  </select>

  <update id="updateValueByValue" statementType="STATEMENT">
    update <include refid="table"/>
    set
    ${col} = ${val}
    WHERE
    ${keyCol} = ${keyVal}
  </update>

  <update id="updateValueByMultiValue" statementType="STATEMENT">
    UPDATE <include refid="table"/>
    SET ${col} = ${val}
    WHERE
    <foreach item="item" index="index" collection="keyCols" separator=" and">
      ${keyCols[index]} = ${keyVals[index]}
    </foreach>
  </update>
  <update id="updateMultiValueByValue" statementType="STATEMENT">
    UPDATE <include refid="table"/>
    SET
    <foreach item="item" index="index" collection="cols" separator=" ,">
      ${cols[index]} = ${vals[index]}
    </foreach>
    WHERE ${keyCol} = ${keyVal}
  </update>
  <update id="updateMultiValueByMultiValue" statementType="STATEMENT">
    update <include refid="table"/>
    set
    <foreach item="item" index="index" collection="cols" separator=" ,">
      ${cols[index]} = ${vals[index]}
    </foreach>
    WHERE
    <foreach item="item" index="index" collection="keyCols" separator=" and">
      ${keyCols[index]} = ${keyVals[index]}
    </foreach>
  </update>

  <delete id="deleteByMultiValue" statementType="STATEMENT">
    DELETE FROM <include refid="table"/>
    WHERE
    <foreach item="item" index="index" collection="cols" separator=" and">
      ${cols[index]} = ${vals[index]}
    </foreach>
  </delete>
  <delete id="delete" parameterType="java.lang.Long">
    DELETE from <include refid="table"/> where id = #{id}
  </delete>

  <delete id="deleteByValue" statementType="STATEMENT">
    DELETE FROM <include refid="table"/>
    WHERE ${col} = ${val}
  </delete>
  <select id="queryAll" resultMap="BaseResultMap" statementType="STATEMENT">
    SELECT * FROM <include refid="table"/>
  </select>

</mapper>